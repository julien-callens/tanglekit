// Generated from src/g4/TangleLexer.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,41,531,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,
6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,
7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,
7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,
22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,
2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,
37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,
7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,
51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,
2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,
66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,
7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,
80,1,0,4,0,174,8,0,11,0,12,0,175,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
1,2,1,2,1,3,1,3,3,3,192,8,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
1,9,1,10,1,10,1,11,1,11,1,12,4,12,211,8,12,11,12,12,12,212,1,13,1,13,1,14,
1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,
15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,256,8,17,1,18,1,18,1,19,
1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,4,23,273,8,23,
11,23,12,23,274,1,24,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,
28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,3,31,296,8,31,1,32,1,32,1,33,1,33,
1,34,1,34,1,34,1,34,1,35,1,35,1,35,5,35,309,8,35,10,35,12,35,312,9,35,1,
36,1,36,1,36,1,36,1,36,1,37,4,37,320,8,37,11,37,12,37,321,1,38,1,38,1,38,
1,38,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,
1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,
47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,
1,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,
53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,
1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,
58,1,58,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,
1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,
65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,68,
1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,71,1,
71,1,71,1,71,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,
1,74,1,75,1,75,1,75,1,75,1,76,5,76,507,8,76,10,76,12,76,510,9,76,1,77,1,
77,1,77,1,77,1,78,4,78,517,8,78,11,78,12,78,518,1,79,1,79,1,79,1,79,1,79,
1,80,1,80,1,80,1,80,1,80,1,80,0,0,81,10,1,12,0,14,0,16,0,18,0,20,0,22,0,
24,0,26,0,28,0,30,0,32,0,34,0,36,0,38,2,40,3,42,4,44,5,46,6,48,7,50,8,52,
9,54,10,56,11,58,12,60,13,62,14,64,15,66,16,68,17,70,18,72,19,74,20,76,21,
78,22,80,23,82,24,84,25,86,26,88,27,90,28,92,29,94,0,96,0,98,0,100,30,102,
0,104,31,106,0,108,0,110,0,112,0,114,32,116,33,118,0,120,0,122,0,124,0,126,
34,128,0,130,35,132,36,134,0,136,0,138,37,140,0,142,0,144,0,146,0,148,0,
150,0,152,0,154,0,156,0,158,0,160,38,162,39,164,40,166,41,168,0,170,0,10,
0,1,2,3,4,5,6,7,8,9,6,3,0,9,10,13,13,32,32,2,0,48,57,95,95,3,0,65,90,95,
95,97,122,1,0,48,57,2,0,34,34,39,39,2,0,60,60,123,123,519,0,10,1,0,0,0,0,
38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,
0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,
1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,
0,72,1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,1,82,1,
0,0,0,1,84,1,0,0,0,1,86,1,0,0,0,1,88,1,0,0,0,1,90,1,0,0,0,1,92,1,0,0,0,2,
94,1,0,0,0,2,96,1,0,0,0,2,98,1,0,0,0,2,100,1,0,0,0,2,102,1,0,0,0,2,104,1,
0,0,0,3,106,1,0,0,0,3,108,1,0,0,0,3,110,1,0,0,0,3,112,1,0,0,0,3,114,1,0,
0,0,3,116,1,0,0,0,4,118,1,0,0,0,4,120,1,0,0,0,4,122,1,0,0,0,4,124,1,0,0,
0,4,126,1,0,0,0,4,128,1,0,0,0,5,130,1,0,0,0,5,132,1,0,0,0,5,134,1,0,0,0,
5,136,1,0,0,0,6,138,1,0,0,0,6,140,1,0,0,0,6,142,1,0,0,0,6,144,1,0,0,0,6,
146,1,0,0,0,6,148,1,0,0,0,6,150,1,0,0,0,7,152,1,0,0,0,7,154,1,0,0,0,7,156,
1,0,0,0,7,158,1,0,0,0,7,160,1,0,0,0,8,162,1,0,0,0,8,164,1,0,0,0,9,166,1,
0,0,0,9,168,1,0,0,0,9,170,1,0,0,0,10,173,1,0,0,0,12,179,1,0,0,0,14,183,1,
0,0,0,16,191,1,0,0,0,18,193,1,0,0,0,20,195,1,0,0,0,22,197,1,0,0,0,24,199,
1,0,0,0,26,201,1,0,0,0,28,203,1,0,0,0,30,205,1,0,0,0,32,207,1,0,0,0,34,210,
1,0,0,0,36,214,1,0,0,0,38,216,1,0,0,0,40,227,1,0,0,0,42,237,1,0,0,0,44,255,
1,0,0,0,46,257,1,0,0,0,48,259,1,0,0,0,50,261,1,0,0,0,52,264,1,0,0,0,54,267,
1,0,0,0,56,272,1,0,0,0,58,276,1,0,0,0,60,280,1,0,0,0,62,282,1,0,0,0,64,284,
1,0,0,0,66,287,1,0,0,0,68,289,1,0,0,0,70,291,1,0,0,0,72,295,1,0,0,0,74,297,
1,0,0,0,76,299,1,0,0,0,78,301,1,0,0,0,80,305,1,0,0,0,82,313,1,0,0,0,84,319,
1,0,0,0,86,323,1,0,0,0,88,327,1,0,0,0,90,329,1,0,0,0,92,333,1,0,0,0,94,345,
1,0,0,0,96,349,1,0,0,0,98,353,1,0,0,0,100,358,1,0,0,0,102,362,1,0,0,0,104,
366,1,0,0,0,106,377,1,0,0,0,108,381,1,0,0,0,110,385,1,0,0,0,112,390,1,0,
0,0,114,394,1,0,0,0,116,398,1,0,0,0,118,408,1,0,0,0,120,412,1,0,0,0,122,
416,1,0,0,0,124,421,1,0,0,0,126,425,1,0,0,0,128,429,1,0,0,0,130,434,1,0,
0,0,132,438,1,0,0,0,134,442,1,0,0,0,136,447,1,0,0,0,138,452,1,0,0,0,140,
456,1,0,0,0,142,460,1,0,0,0,144,466,1,0,0,0,146,470,1,0,0,0,148,474,1,0,
0,0,150,479,1,0,0,0,152,484,1,0,0,0,154,488,1,0,0,0,156,492,1,0,0,0,158,
496,1,0,0,0,160,501,1,0,0,0,162,508,1,0,0,0,164,511,1,0,0,0,166,516,1,0,
0,0,168,520,1,0,0,0,170,525,1,0,0,0,172,174,7,0,0,0,173,172,1,0,0,0,174,
175,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,177,178,6,0,
0,0,178,11,1,0,0,0,179,180,5,108,0,0,180,181,5,101,0,0,181,182,5,116,0,0,
182,13,1,0,0,0,183,184,5,99,0,0,184,185,5,111,0,0,185,186,5,110,0,0,186,
187,5,115,0,0,187,188,5,116,0,0,188,15,1,0,0,0,189,192,3,28,9,0,190,192,
3,30,10,0,191,189,1,0,0,0,191,190,1,0,0,0,192,17,1,0,0,0,193,194,5,123,0,
0,194,19,1,0,0,0,195,196,5,125,0,0,196,21,1,0,0,0,197,198,5,41,0,0,198,23,
1,0,0,0,199,200,5,44,0,0,200,25,1,0,0,0,201,202,5,59,0,0,202,27,1,0,0,0,
203,204,5,39,0,0,204,29,1,0,0,0,205,206,5,34,0,0,206,31,1,0,0,0,207,208,
5,47,0,0,208,33,1,0,0,0,209,211,7,1,0,0,210,209,1,0,0,0,211,212,1,0,0,0,
212,210,1,0,0,0,212,213,1,0,0,0,213,35,1,0,0,0,214,215,7,2,0,0,215,37,1,
0,0,0,216,217,5,60,0,0,217,218,5,105,0,0,218,219,5,109,0,0,219,220,5,112,
0,0,220,221,5,111,0,0,221,222,5,114,0,0,222,223,5,116,0,0,223,224,5,62,0,
0,224,225,1,0,0,0,225,226,6,14,1,0,226,39,1,0,0,0,227,228,5,60,0,0,228,229,
5,112,0,0,229,230,5,114,0,0,230,231,5,111,0,0,231,232,5,112,0,0,232,233,
5,115,0,0,233,234,5,62,0,0,234,235,1,0,0,0,235,236,6,15,2,0,236,41,1,0,0,
0,237,238,5,60,0,0,238,239,5,99,0,0,239,240,5,111,0,0,240,241,5,100,0,0,
241,242,5,101,0,0,242,243,5,62,0,0,243,244,1,0,0,0,244,245,6,16,3,0,245,
43,1,0,0,0,246,247,5,116,0,0,247,248,5,114,0,0,248,249,5,117,0,0,249,256,
5,101,0,0,250,251,5,102,0,0,251,252,5,97,0,0,252,253,5,108,0,0,253,254,5,
115,0,0,254,256,5,101,0,0,255,246,1,0,0,0,255,250,1,0,0,0,256,45,1,0,0,0,
257,258,5,61,0,0,258,47,1,0,0,0,259,260,5,40,0,0,260,49,1,0,0,0,261,262,
3,18,4,0,262,263,3,18,4,0,263,51,1,0,0,0,264,265,3,20,5,0,265,266,3,20,5,
0,266,53,1,0,0,0,267,268,3,52,21,0,268,269,1,0,0,0,269,270,6,22,4,0,270,
55,1,0,0,0,271,273,7,3,0,0,272,271,1,0,0,0,273,274,1,0,0,0,274,272,1,0,0,
0,274,275,1,0,0,0,275,57,1,0,0,0,276,277,3,16,3,0,277,278,1,0,0,0,278,279,
6,24,5,0,279,59,1,0,0,0,280,281,3,18,4,0,281,61,1,0,0,0,282,283,3,20,5,0,
283,63,1,0,0,0,284,285,3,80,35,0,285,286,3,48,19,0,286,65,1,0,0,0,287,288,
3,48,19,0,288,67,1,0,0,0,289,290,3,22,6,0,290,69,1,0,0,0,291,292,3,24,7,
0,292,71,1,0,0,0,293,296,3,12,1,0,294,296,3,14,2,0,295,293,1,0,0,0,295,294,
1,0,0,0,296,73,1,0,0,0,297,298,3,26,8,0,298,75,1,0,0,0,299,300,3,32,11,0,
300,77,1,0,0,0,301,302,5,60,0,0,302,303,1,0,0,0,303,304,6,34,6,0,304,79,
1,0,0,0,305,310,3,36,13,0,306,309,3,36,13,0,307,309,3,34,12,0,308,306,1,
0,0,0,308,307,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,
81,1,0,0,0,312,310,1,0,0,0,313,314,5,102,0,0,314,315,5,114,0,0,315,316,5,
111,0,0,316,317,5,109,0,0,317,83,1,0,0,0,318,320,3,36,13,0,319,318,1,0,0,
0,320,321,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,85,1,0,0,0,323,324,
3,16,3,0,324,325,1,0,0,0,325,326,6,38,5,0,326,87,1,0,0,0,327,328,3,26,8,
0,328,89,1,0,0,0,329,330,3,10,0,0,330,331,1,0,0,0,331,332,6,40,0,0,332,91,
1,0,0,0,333,334,5,60,0,0,334,335,5,47,0,0,335,336,5,105,0,0,336,337,5,109,
0,0,337,338,5,112,0,0,338,339,5,111,0,0,339,340,5,114,0,0,340,341,5,116,
0,0,341,342,5,62,0,0,342,343,1,0,0,0,343,344,6,41,7,0,344,93,1,0,0,0,345,
346,3,72,31,0,346,347,1,0,0,0,347,348,6,42,8,0,348,95,1,0,0,0,349,350,3,
80,35,0,350,351,1,0,0,0,351,352,6,43,9,0,352,97,1,0,0,0,353,354,3,46,18,
0,354,355,1,0,0,0,355,356,6,44,10,0,356,357,6,44,11,0,357,99,1,0,0,0,358,
359,3,10,0,0,359,360,1,0,0,0,360,361,6,45,0,0,361,101,1,0,0,0,362,363,3,
74,32,0,363,364,1,0,0,0,364,365,6,46,12,0,365,103,1,0,0,0,366,367,5,60,0,
0,367,368,5,47,0,0,368,369,5,112,0,0,369,370,5,114,0,0,370,371,5,111,0,0,
371,372,5,112,0,0,372,373,5,115,0,0,373,374,5,62,0,0,374,375,1,0,0,0,375,
376,6,47,7,0,376,105,1,0,0,0,377,378,3,72,31,0,378,379,1,0,0,0,379,380,6,
48,8,0,380,107,1,0,0,0,381,382,3,80,35,0,382,383,1,0,0,0,383,384,6,49,9,
0,384,109,1,0,0,0,385,386,3,46,18,0,386,387,1,0,0,0,387,388,6,50,10,0,388,
389,6,50,11,0,389,111,1,0,0,0,390,391,3,74,32,0,391,392,1,0,0,0,392,393,
6,51,12,0,393,113,1,0,0,0,394,395,3,10,0,0,395,396,1,0,0,0,396,397,6,52,
0,0,397,115,1,0,0,0,398,399,5,60,0,0,399,400,5,47,0,0,400,401,5,99,0,0,401,
402,5,111,0,0,402,403,5,100,0,0,403,404,5,101,0,0,404,405,5,62,0,0,405,406,
1,0,0,0,406,407,6,53,7,0,407,117,1,0,0,0,408,409,3,56,23,0,409,410,1,0,0,
0,410,411,6,54,13,0,411,119,1,0,0,0,412,413,3,44,17,0,413,414,1,0,0,0,414,
415,6,55,14,0,415,121,1,0,0,0,416,417,3,16,3,0,417,418,1,0,0,0,418,419,6,
56,15,0,419,420,6,56,5,0,420,123,1,0,0,0,421,422,3,80,35,0,422,423,1,0,0,
0,423,424,6,57,9,0,424,125,1,0,0,0,425,426,3,10,0,0,426,427,1,0,0,0,427,
428,6,58,0,0,428,127,1,0,0,0,429,430,3,26,8,0,430,431,1,0,0,0,431,432,6,
59,12,0,432,433,6,59,7,0,433,129,1,0,0,0,434,435,3,10,0,0,435,436,1,0,0,
0,436,437,6,60,0,0,437,131,1,0,0,0,438,439,5,62,0,0,439,440,1,0,0,0,440,
441,6,61,7,0,441,133,1,0,0,0,442,443,3,76,33,0,443,444,1,0,0,0,444,445,6,
62,16,0,445,446,6,62,7,0,446,135,1,0,0,0,447,448,3,80,35,0,448,449,1,0,0,
0,449,450,6,63,9,0,450,451,6,63,17,0,451,137,1,0,0,0,452,453,3,10,0,0,453,
454,1,0,0,0,454,455,6,64,0,0,455,139,1,0,0,0,456,457,3,32,11,0,457,458,1,
0,0,0,458,459,6,65,16,0,459,141,1,0,0,0,460,461,5,62,0,0,461,462,1,0,0,0,
462,463,6,66,18,0,463,464,6,66,7,0,464,465,6,66,4,0,465,143,1,0,0,0,466,
467,3,80,35,0,467,468,1,0,0,0,468,469,6,67,9,0,469,145,1,0,0,0,470,471,3,
46,18,0,471,472,1,0,0,0,472,473,6,68,10,0,473,147,1,0,0,0,474,475,3,58,24,
0,475,476,1,0,0,0,476,477,6,69,15,0,477,478,6,69,5,0,478,149,1,0,0,0,479,
480,3,50,20,0,480,481,1,0,0,0,481,482,6,70,19,0,482,483,6,70,20,0,483,151,
1,0,0,0,484,485,3,56,23,0,485,486,1,0,0,0,486,487,6,71,13,0,487,153,1,0,
0,0,488,489,3,44,17,0,489,490,1,0,0,0,490,491,6,72,14,0,491,155,1,0,0,0,
492,493,3,80,35,0,493,494,1,0,0,0,494,495,6,73,9,0,495,157,1,0,0,0,496,497,
3,52,21,0,497,498,1,0,0,0,498,499,6,74,21,0,499,500,6,74,7,0,500,159,1,0,
0,0,501,502,3,10,0,0,502,503,1,0,0,0,503,504,6,75,0,0,504,161,1,0,0,0,505,
507,8,4,0,0,506,505,1,0,0,0,507,510,1,0,0,0,508,506,1,0,0,0,508,509,1,0,
0,0,509,163,1,0,0,0,510,508,1,0,0,0,511,512,3,58,24,0,512,513,1,0,0,0,513,
514,6,77,7,0,514,165,1,0,0,0,515,517,8,5,0,0,516,515,1,0,0,0,517,518,1,0,
0,0,518,516,1,0,0,0,518,519,1,0,0,0,519,167,1,0,0,0,520,521,3,50,20,0,521,
522,1,0,0,0,522,523,6,79,19,0,523,524,6,79,20,0,524,169,1,0,0,0,525,526,
3,78,34,0,526,527,1,0,0,0,527,528,6,80,22,0,528,529,6,80,7,0,529,530,6,80,
6,0,530,171,1,0,0,0,21,0,1,2,3,4,5,6,7,8,9,175,191,212,255,274,295,308,310,
321,508,518,23,6,0,0,5,1,0,5,2,0,5,3,0,5,9,0,5,8,0,5,5,0,4,0,0,7,19,0,7,
23,0,7,6,0,5,4,0,7,20,0,7,11,0,7,5,0,7,12,0,7,21,0,5,6,0,7,36,0,7,8,0,5,
7,0,7,9,0,7,22,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class TangleLexer extends antlr4.Lexer {

    static grammarFileName = "TangleLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE", "IMPORT", "PROPS", "CODE", "STATEMENT", 
                      "TAG", "ATTRIBUTE", "EMBEDDED", "STRING", "CONTENT" ];
	static literalNames = [ null, null, "'<import>'", "'<props>'", "'<code>'", 
                         null, "'='", "'('", null, null, null, null, null, 
                         null, null, null, null, null, null, null, null, 
                         null, "'<'", null, "'from'", null, null, null, 
                         null, "'</import>'", null, "'</props>'", null, 
                         "'</code>'", null, null, "'>'" ];
	static symbolicNames = [ null, "WS", "IMPORT_OPEN", "PROPS_OPEN", "CODE_OPEN", 
                          "BOOL", "EQUALS", "LPAREN", "EMBEDDED_OPEN", "EMBEDDED_CLOSE", 
                          "EMBEDDED_CONTENT_CLOSE", "INT", "STRING_OPEN", 
                          "CODE_BLOCK_OPEN", "CODE_BLOCK_CLOSE", "FUNC_START", 
                          "ARGS_OPEN", "ARGS_CLOSE", "ARGS_SEPARATOR", "VAR_DEF", 
                          "STATEMENT_END", "TAG_SLASH", "TAG_OPEN", "NAME", 
                          "FROM", "IMPORT_ID", "IMPORT_PATH_OPEN", "IMPORT_STATEMENT_END", 
                          "IMPORT_WS", "IMPORT_CLOSE", "PROPS_WS", "PROPS_CLOSE", 
                          "CODE_WS", "CODE_CLOSE", "STATEMENT_WS", "TAG_WS", 
                          "TAG_CLOSE", "ATTRIBUTE_WS", "EMBEDDED_WS", "STRING_CONTENT", 
                          "STRING_CLOSE", "TEXT" ];
	static ruleNames = [ "WS", "VAR_LET", "VAR_CONST", "STRING_WRAPPER", "LBRACE", 
                      "RBRACE", "RPAREN", "COMMA", "SEMICOLON", "QUOTE", 
                      "DOUBLE_QUOTE", "SLASH", "NUMBER", "LETTER", "IMPORT_OPEN", 
                      "PROPS_OPEN", "CODE_OPEN", "BOOL", "EQUALS", "LPAREN", 
                      "EMBEDDED_OPEN", "EMBEDDED_CLOSE", "EMBEDDED_CONTENT_CLOSE", 
                      "INT", "STRING_OPEN", "CODE_BLOCK_OPEN", "CODE_BLOCK_CLOSE", 
                      "FUNC_START", "ARGS_OPEN", "ARGS_CLOSE", "ARGS_SEPARATOR", 
                      "VAR_DEF", "STATEMENT_END", "TAG_SLASH", "TAG_OPEN", 
                      "NAME", "FROM", "IMPORT_ID", "IMPORT_PATH_OPEN", "IMPORT_STATEMENT_END", 
                      "IMPORT_WS", "IMPORT_CLOSE", "PROP_DEF", "PROP_NAME", 
                      "PROP_EQUALS", "PROPS_WS", "PROP_CLOSE", "PROPS_CLOSE", 
                      "CODE_VAR_DEF", "CODE_NAME", "CODE_EQUALS", "CODE_STATEMENT_END", 
                      "CODE_WS", "CODE_CLOSE", "INT_STATEMENT", "BOOLEAN_STATEMENT", 
                      "STRING_START", "NAME_STATEMENT", "STATEMENT_WS", 
                      "STATEMENT_CLOSE", "TAG_WS", "TAG_CLOSE", "TAG_CLOSING", 
                      "TAG_NAME", "ATTRIBUTE_WS", "ATTRIBUTE_SLASH", "ATTRIBUTE_CLOSE", 
                      "ATTRIBUTE_NAME", "ATTRIBUTE_EQUALS", "ATTRIBUTE_VALUE", 
                      "ATTRIBUTE_VALUE_DYNAMIC", "EMBEDDED_INT", "EMBEDDED_BOOL", 
                      "EMBEDDED_NAME", "CLOSE", "EMBEDDED_WS", "STRING_CONTENT", 
                      "STRING_CLOSE", "TEXT", "EMBEDDED_POP", "TAG_POP" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

TangleLexer.EOF = antlr4.Token.EOF;
TangleLexer.WS = 1;
TangleLexer.IMPORT_OPEN = 2;
TangleLexer.PROPS_OPEN = 3;
TangleLexer.CODE_OPEN = 4;
TangleLexer.BOOL = 5;
TangleLexer.EQUALS = 6;
TangleLexer.LPAREN = 7;
TangleLexer.EMBEDDED_OPEN = 8;
TangleLexer.EMBEDDED_CLOSE = 9;
TangleLexer.EMBEDDED_CONTENT_CLOSE = 10;
TangleLexer.INT = 11;
TangleLexer.STRING_OPEN = 12;
TangleLexer.CODE_BLOCK_OPEN = 13;
TangleLexer.CODE_BLOCK_CLOSE = 14;
TangleLexer.FUNC_START = 15;
TangleLexer.ARGS_OPEN = 16;
TangleLexer.ARGS_CLOSE = 17;
TangleLexer.ARGS_SEPARATOR = 18;
TangleLexer.VAR_DEF = 19;
TangleLexer.STATEMENT_END = 20;
TangleLexer.TAG_SLASH = 21;
TangleLexer.TAG_OPEN = 22;
TangleLexer.NAME = 23;
TangleLexer.FROM = 24;
TangleLexer.IMPORT_ID = 25;
TangleLexer.IMPORT_PATH_OPEN = 26;
TangleLexer.IMPORT_STATEMENT_END = 27;
TangleLexer.IMPORT_WS = 28;
TangleLexer.IMPORT_CLOSE = 29;
TangleLexer.PROPS_WS = 30;
TangleLexer.PROPS_CLOSE = 31;
TangleLexer.CODE_WS = 32;
TangleLexer.CODE_CLOSE = 33;
TangleLexer.STATEMENT_WS = 34;
TangleLexer.TAG_WS = 35;
TangleLexer.TAG_CLOSE = 36;
TangleLexer.ATTRIBUTE_WS = 37;
TangleLexer.EMBEDDED_WS = 38;
TangleLexer.STRING_CONTENT = 39;
TangleLexer.STRING_CLOSE = 40;
TangleLexer.TEXT = 41;

TangleLexer.IMPORT = 1;
TangleLexer.PROPS = 2;
TangleLexer.CODE = 3;
TangleLexer.STATEMENT = 4;
TangleLexer.TAG = 5;
TangleLexer.ATTRIBUTE = 6;
TangleLexer.EMBEDDED = 7;
TangleLexer.STRING = 8;
TangleLexer.CONTENT = 9;




